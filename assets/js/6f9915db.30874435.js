"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[689],{4117:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"sdks/wallet/javascript/testing","title":"Testing","description":"To enhance the integration experience, this package contains mocks of the WalletClient to test the integration with a wallet. This package offers 2 mocks:","source":"@site/docs/sdks/wallet/javascript/testing.md","sourceDirName":"sdks/wallet/javascript","slug":"/sdks/wallet/javascript/testing","permalink":"/one-click-connect/docs/sdks/wallet/javascript/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sdks/wallet/javascript/testing.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"walletJavascriptSidebar","previous":{"title":"Errors","permalink":"/one-click-connect/docs/sdks/wallet/javascript/errors"},"next":{"title":"Report an issue","permalink":"/one-click-connect/docs/sdks/wallet/javascript/report_an_issue"}}');var i=l(7968),s=l(7334);const a={sidebar_position:4},c="Testing",o={},r=[{value:"Framework compatibility",id:"framework-compatibility",level:2},{value:"Mocks",id:"mocks",level:2},{value:"WalletClientMock",id:"walletclientmock",level:3},{value:"Usage",id:"usage",level:4},{value:"WalletClientGlobalMock",id:"walletclientglobalmock",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"testing",children:"Testing"})}),"\n",(0,i.jsxs)(t.p,{children:["To enhance the integration experience, this package contains mocks of the ",(0,i.jsx)(t.a,{href:"./client",children:(0,i.jsx)(t.code,{children:"WalletClient"})})," to test the integration with a wallet. This package offers 2 mocks:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"./testing#walletclientmock",children:(0,i.jsx)(t.code,{children:"WalletClientMock"})}),": A mock of the ",(0,i.jsx)(t.a,{href:"./client",children:(0,i.jsx)(t.code,{children:"WalletClient"})})," that simulates wallet behavior."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"./testing#walletclientglobalmock",children:(0,i.jsx)(t.code,{children:"WalletClientGlobalMock"})}),": A global mock of the ",(0,i.jsx)(t.a,{href:"./client",children:(0,i.jsx)(t.code,{children:"WalletClient"})})," that simulates wallet behavior."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Both mocks allow simulating wallet behavior and testing wallet integration."}),"\n",(0,i.jsx)(t.h2,{id:"framework-compatibility",children:"Framework compatibility"}),"\n",(0,i.jsx)(t.p,{children:"This package is compatible with the following frameworks:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Framework"}),(0,i.jsx)(t.th,{children:"Status"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Jest"}),(0,i.jsx)(t.td,{children:"\u2705"})]})})]}),"\n",(0,i.jsx)(t.h2,{id:"mocks",children:"Mocks"}),"\n",(0,i.jsx)(t.h3,{id:"walletclientmock",children:"WalletClientMock"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"WalletClientMock"})," is a specific mock for mocking an instance of ",(0,i.jsx)(t.a,{href:"./client",children:(0,i.jsx)(t.code,{children:"WalletClient"})}),". It is ideal for use in unit tests where the ",(0,i.jsx)(t.a,{href:"./client",children:(0,i.jsx)(t.code,{children:"WalletClient"})})," is injected as a dependency."]}),"\n",(0,i.jsx)(t.h4,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.p,{children:"To use it, you can import the mock from the package and use it in your test:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'import { WalletClientMock } from "@one-click-connect/vanilla-wallet/mocks";\n\nconst mock = new WalletClientMock();\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You can modify the mock behavior by overriding the returned values of the methods. For example, if you want to mock the ",(0,i.jsx)(t.code,{children:"requestSignIn"})," method to return a specific URL, you can do the following:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'mock.requestSignIn.mockReturnValue("https://example.com");\n'})}),"\n",(0,i.jsx)(t.p,{children:"or throwing an error:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'mock.requestSignIn.mockRejectedValue(new Error("Error signing in"));\n'})}),"\n",(0,i.jsx)(t.h3,{id:"walletclientglobalmock",children:"WalletClientGlobalMock"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"WalletClientGlobalMock"})," is a global mock of the ",(0,i.jsx)(t.code,{children:"WalletClient"})," that simulates wallet behavior across the entire application. It is ideal for integration testing where you need to test the complete wallet integration flow. Like the ",(0,i.jsx)(t.code,{children:"WalletClientMock"}),", this mock allows you to modify the wallet behavior throughout the application."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},7334:(e,t,l)=>{l.d(t,{R:()=>a,x:()=>c});var n=l(4700);const i={},s=n.createContext(i);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);