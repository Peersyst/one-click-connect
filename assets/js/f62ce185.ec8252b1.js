"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[817],{7334:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var t=i(4700);const c={},o=t.createContext(c);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},7665:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"sdks/dapp/javascript/testing","title":"Testing","description":"To enhance the integration experience, this package contains mocks of the Client and RelayerClient to test the integration with a dapp. This package offers 2 different types of mocks:","source":"@site/docs/sdks/dapp/javascript/testing.md","sourceDirName":"sdks/dapp/javascript","slug":"/sdks/dapp/javascript/testing","permalink":"/1-click-connect/docs/sdks/dapp/javascript/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sdks/dapp/javascript/testing.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"dappJavascriptSidebar","previous":{"title":"Errors","permalink":"/1-click-connect/docs/sdks/dapp/javascript/errors"},"next":{"title":"Report an issue","permalink":"/1-click-connect/docs/sdks/dapp/javascript/report_an_issue"}}');var c=i(7968),o=i(7334);const s={sidebar_position:4},r="Testing",l={},a=[{value:"Framework compatibility",id:"framework-compatibility",level:2},{value:"Mocks",id:"mocks",level:2},{value:"Client",id:"client",level:3},{value:"ClientMock",id:"clientmock",level:4},{value:"ClientGlobalMock",id:"clientglobalmock",level:4},{value:"RelayerClient",id:"relayerclient",level:3},{value:"RelayerClientMock",id:"relayerclientmock",level:4},{value:"RelayerClientGlobalMock",id:"relayerclientglobalmock",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"testing",children:"Testing"})}),"\n",(0,c.jsxs)(n.p,{children:["To enhance the integration experience, this package contains mocks of the ",(0,c.jsx)(n.a,{href:"./clients#client",children:(0,c.jsx)(n.code,{children:"Client"})})," and ",(0,c.jsx)(n.a,{href:"./clients#relayerclient",children:(0,c.jsx)(n.code,{children:"RelayerClient"})})," to test the integration with a dapp. This package offers 2 different types of mocks:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Mock"}),": A mock to simulate certain behavior of a class instance."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"GlobalMock"}),": A global mock to simulate certain behavior of a class across the entire application."]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Each client has its own pair of mocks, so you can mock the behavior of the client in your tests as you desire."}),"\n",(0,c.jsx)(n.h2,{id:"framework-compatibility",children:"Framework compatibility"}),"\n",(0,c.jsx)(n.p,{children:"This package is compatible with the following frameworks:"}),"\n",(0,c.jsxs)(n.table,{children:[(0,c.jsx)(n.thead,{children:(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.th,{children:"Framework"}),(0,c.jsx)(n.th,{children:"Status"})]})}),(0,c.jsx)(n.tbody,{children:(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:"Jest"}),(0,c.jsx)(n.td,{children:"\u2705"})]})})]}),"\n",(0,c.jsx)(n.h2,{id:"mocks",children:"Mocks"}),"\n",(0,c.jsx)(n.h3,{id:"client",children:"Client"}),"\n",(0,c.jsx)(n.h4,{id:"clientmock",children:"ClientMock"}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"ClientMock"})," is a specific mock for mocking an instance of ",(0,c.jsx)(n.a,{href:"./clients#client",children:(0,c.jsx)(n.code,{children:"Client"})}),". It is ideal for use in unit tests where the ",(0,c.jsx)(n.a,{href:"./clients#client",children:(0,c.jsx)(n.code,{children:"Client"})})," is injected as a dependency."]}),"\n",(0,c.jsx)(n.p,{children:"To use it, you can import the mock from the package and use it in your test:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:'import { ClientMock } from "@one-click-connect/browser-dapp/mocks";\n\nconst mock = new ClientMock();\n'})}),"\n",(0,c.jsxs)(n.p,{children:["You can modify the mock behavior by overriding the returned values of the methods. For example, if you want to mock the ",(0,c.jsx)(n.code,{children:"isSignedIn"})," method to return a specific boolean value, you can do the following:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"mock.isSignedIn.mockReturnValue(true);\n"})}),"\n",(0,c.jsx)(n.p,{children:"or throwing an error:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:'mock.isSignedIn.mockRejectedValue(new Error("Error signing in"));\n'})}),"\n",(0,c.jsx)(n.h4,{id:"clientglobalmock",children:"ClientGlobalMock"}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"ClientGlobalMock"})," is a global mock of the ",(0,c.jsx)(n.code,{children:"Client"})," that simulates its behavior across the entire application. It is ideal for testing where you need to test the complete dapp integration flow. Like the ",(0,c.jsx)(n.code,{children:"ClientMock"}),", this mock allows you to modify the dapp behavior throughout the application."]}),"\n",(0,c.jsx)(n.h3,{id:"relayerclient",children:"RelayerClient"}),"\n",(0,c.jsx)(n.h4,{id:"relayerclientmock",children:"RelayerClientMock"}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"RelayerClientMock"})," is a specific mock for mocking an instance of ",(0,c.jsx)(n.a,{href:"./clients#relayerclient",children:(0,c.jsx)(n.code,{children:"RelayerClient"})}),". It is ideal for use in unit tests where the ",(0,c.jsx)(n.a,{href:"./clients#relayerclient",children:(0,c.jsx)(n.code,{children:"RelayerClient"})})," is injected as a dependency."]}),"\n",(0,c.jsx)(n.p,{children:"To use it, you can import the mock from the package and use it in your test:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:'import { RelayerClientMock } from "@one-click-connect/browser-dapp/mocks";\n\nconst mock = new RelayerClientMock();\n'})}),"\n",(0,c.jsxs)(n.p,{children:["You can modify the mock behavior by overriding the returned values of the methods. For example, if you want to mock the ",(0,c.jsx)(n.code,{children:"isSignedIn"})," method to return a specific boolean value, you can do the following:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"mock.isSignedIn.mockReturnValue(true);\n"})}),"\n",(0,c.jsx)(n.p,{children:"or throwing an error:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:'mock.isSignedIn.mockRejectedValue(new Error("Error signing in"));\n'})}),"\n",(0,c.jsx)(n.h4,{id:"relayerclientglobalmock",children:"RelayerClientGlobalMock"}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"RelayerClientGlobalMock"})," is a global mock of the ",(0,c.jsx)(n.code,{children:"RelayerClient"})," that simulates its behavior across the entire application. It is ideal for testing where you need to test the complete dapp integration flow. Like the ",(0,c.jsx)(n.code,{children:"RelayerClientMock"}),", this mock allows you to modify the dapp behavior throughout the application."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}}}]);